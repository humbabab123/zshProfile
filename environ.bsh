
################################################################################
#
#   .environ
#
################################################################################
#
#   DESCRIPTION
#       This file contains functions and envrionment settings
#
#   AUTHOR
#       Jayme Wilkinson
#
#   HISTORY
#       Aug 20, 2018	Initial Version
#       Oct 11, 2018	Added mstat function
#       Nov 21, 2018    Added doc/dev aliases
#       Jun 11, 2019    Added work and tool aliases
#       Jun 12, 2019    Updated completion rules
#       Jun 13, 2019    Added TotalView function
#       Oct 10, 2019    Added PostViz Oz alias
#
################################################################################
#
#   Copyright (c) 2018 Lightstorm Entertainment LLC.
#
#   The software and information contained herein are proprietary to, and
#   comprise valuable trade secrets of, Lightstorm Entertainment LLC., which
#   intends to preserve as trade secrets such software and information. This
#   software and information or anny other copies thereof may not be provided
#   or otherwise made available ton any other person or organization.
#
################################################################################

################################################################################
#
#   Common Environment Variables
#
################################################################################
PLATFORM=`uname`

GREP_COLORS="ms=01;31:mc=01;31:sl=:cx=:fn=35:ln=32:bn=32:se=3"

PROMPT_DIRTRIM=3
PROMPT_COMMAND="updatePrompt"

################################################################################
#
#   Common Environment Settings
#
################################################################################
if [ $BASH_VERSINFO == 4 ]; then
    shopt -s autocd     # Enable implicit cd
fi

set -o vi	    	    # Set VI keyboard bindings for the terminal


################################################################################
#
#   Platform Specific Environment Variables
#
################################################################################
if   [ $PLATFORM == "Linux" ]; then
    #   Set the PROJROOT
    PROJROOT="/proj/avtr/work"

    #   OZ Environment Variables
    SCAM_OZ="/avtr/scam/15.2.1/43"
    STAGE_OZ="/avtr/stage/15.1.2/47"
    TEST_OZ="/avtr/testing/15.4.0/8"

    #   Some Development Software Versions
    CMAKE_VERSION="3.7.2"
    CUDA_VERSION="9.0.176"
    GCC_VERSION="4.8.5"

    #   Define any pak versions
    LSDEVEL_VERSION="0.0.77"
    LSDEBDEPLOY_VERSION="0.3.0"

    #   PakRat Version
    PAKRAT_VERSION="2.0.0"

    #   NVidia NSight Environment Variables
    NV_AGORA_VERSION="2019.6"

    #   Substance Environment Variables
    SUBSTANCE_DESIGNER_VERSION="2017.2.1-590"
    SUBSTANCE_PAINTER_VERSION="2018.3.2-2768"

    #   Rogue Wave TotalView Environment Variables
    TOTALVIEW_VERSION="3.14"

    #   Intel System Studio Variables
    VTUNE_VERSION="2019.6.0.602217"

    #   Remote Desktop Environment Variables
    VIRTUAL_MACHINE="vdi-win-vdga22"    # Vectorworks VM

    #   Microsoft VSCode Environment Variables
    VSCODE_VERSION="1.39.0"

elif [ $PLATFORM == "Darwin" ]; then
    #   Set the PROJROOT
    PROJROOT="/Volumes/proj/"

    #   Maya Environment Variables
    MAYA_VERSION="2019"

    #   Nuke Environment Variables
    NUKE_VERSION="9.0v8"

else
    echo -e "\033[37;1mPlatform $PLATFORM is not accounted for in .environ file...\033[0m"
fi


################################################################################
#
#   Functions
#
################################################################################
function designer()
{
    if [ $PLATFORM == "Linux" ]; then
        #   Make sure Substance Designer is loaded in our oz environment
        ozadd "Substance-$SUBSTANCE_DESIGNER_VERSION"

        #   Launch Substance Designer
        echo -e "\033[37;1mLaunching SubstanceDesigner-$SUBSTANCE_DESIGNER_VERSION...\033[0m"
        SubstanceDesigner

    elif [ $PLATFORM == "Darwin" ]; then
        #   Make sure Substance Designer is installed
        SUBSTANCE_DESIGNER_LOCATION="/Applications/Substance Designer.app/Contents/MacOS"

        #   Launch Substance Designer
        echo -e "\033[37;1mLaunching Substance Designer...\033[0m"
        "$SUBSTANCE_DESIGNER_LOCATION/Substance Designer"
    fi
}

function back()
{
    #   This function creates a gzipped tarball of the file/directory supplied.
    if [ -z $1 ]; then
        echo -e "\033[37;1mA file or directory must be specified...\033[0m"
    else
        DIR="${1/\//}"
        DATE=`date "+%m%d%Y_%H%M%S"`
        TGZ=$DIR-$DATE.tgz

        echo -e "Creating Archive \033[33;1m$DIR\033[0m ---> \033[33;1m$TGZ\033[0m"
        tar cfz $TGZ $DIR
    fi
}

function bld()
{
    #   Add CMake to the environment
    echo -e "\033[37;1mAdding cmake-$CMAKE_VERSION\033[0m to the current environment...\033[0m"
    ozadd "cmake-$CMAKE_VERSION"  >> /dev/null

    #   Add GCC to the environment
    echo -e "\033[37;1mAdding gcc-$GCC_VERSION\033[0m to the current environment...\033[0m"
    ozadd "gcc-$GCC_VERSION" >> /dev/null

    #   Ad lsDevel to the environment
    echo -e "\033[37;1mAdding lsDevel-$LSDEVEL_VERSION\033[0m the current environment...\033[0m"
    ozadd "lsDevel-$LSDEVEL_VERSION"  >> /dev/null

    #   Add lsDebDeploy to the environment
    echo -e "\033[37;1mAdding lsDebDeploy-$LSDEBDEPLOY_VERSION\033[0m to the current environment...\033[0m"
    ozadd "lsDebDeploy-$LSDEBDEPLOY_VERSION" >> /dev/null
}

function clean()
{
    #   Clean up and remove all .bak files
    rm -f *.bak

    #   Clean up and remove all .tgz files
    rm -f *.tgz
}

function lab()
{
    if [ $PLATFORM == "Linux" ]; then
        echo -e "\033[37;1mLoading the current lab OZ Environment...\033[0m"
        laboz --add "cmake-$CMAKE_VERSION" --add "gcc-$GCC_VERSION"          \
              --add "lsDevel-$LSDEVEL_VERSION" --add "lsDebDeploy-$LSDEBDEPLOY_VERSION" >> /dev/null
    else
        echo -e "\033[37;1mOZ Environments are not available on this platform...\033[0m"
    fi
}

function maya()
{
    MAYA_DISABLE_CER=1
    MAYA_DISABLE_CIP=1
    MAYA_USE_MALLOC=1

    if [ $PLATFORM == "Linux" ]; then
        #   Make sure Maya is loaded in our oz environment
        if  [ `ozinfo | grep -c " - maya"` == 0 ]; then
            echo -e "\033[31;1mError: Maya is not part of the current oz environment...\033[0m"
        else
            echo -e "\033[37;1mLaunching Maya...\033[0m"
            $MAYA_LOCATION/bin/maya $@
        fi
    elif [ $PLATFORM == "Darwin" ]; then
        #   Set the MAYA_LOCATION Environment variable
        MAYA_LOCATION="/Applications/Autodesk/maya$MAYA_VERSION/Maya.app/Contents"

        echo -e "\033[37;1mLaunching Maya...\033[0m"
        $MAYA_LOCATION/bin/maya $@
    fi
}

function mobu()
{
    if [ $PLATFORM == "Linux" ]; then
        if [ `ozinfo | grep -c " - motionbuilder"` == 0 ]; then
            echo -e "\033[31;1mError: Motionbuilder is not part of the current oz environment...\033[0m"
        else
            echo -e "\033[37;1mLaunching MotionBulder...\033[0m"
            $MOTIONBUILDER_LOCATION/bin/linux_64/motionbuilder
        fi
    else
        echo -e "\033[37;1mThis application is not available on this platform...\033[0m"
    fi
}

function motion()
{
    if [ $PLATFORM == "Linux" ]; then
        echo -e "\033[37;1mLoading the current motion OZ Environment...\033[0m"
        motionoz --add "cmake-$CMAKE_VERSION" --add "gcc-$GCC_VERSION"          \
                 --add "lsDevel-$LSDEVEL_VERSION" --add "lsDebDeploy-$LSDEBDEPLOY_VERSION" >> /dev/null
    else
        echo -e "\033[37;1mOZ Environments are not available on this platform...\033[0m"
    fi
}

function netbeans()
{
    if [ $PLATFORM == "Linux" ]; then
        #   Print a banner telling the user what we are doing.
        echo -e "\033[37;1mLaunching Netbeans...\033[0m"

        #   Launch the Netbeans Application
        ~/Applications/Apache/Netbeans/bin/netbeans --fontsize 16

    elif [ $PLATFORM == "Darwin" ]; then
        echo -e "\033[37;1mLaunching Netbeans...\033[0m"
        /Applications/Netbeans/bin/netbeans --fontsize 16

    fi
}

function nsight()
{
    if [ $PLATFORM == "Linux" ]; then
        #   Launch NVidia NSight
        echo -e "\033[37;1mLaunching nv-nsight-gfx-$NV_AGORA_VERSION\033[0m"
        /home/jwilkinson/Applications/Nvidia/NVIDIA-Nsight-Graphics-$NV_AGORA_VERSION/host/linux-desktop-nomad-x64/nv-nsight-gfx
    else
        echo -e "\033[37;1mThis Application is not available on this platform...\033[0m"
    fi
}

function nuke12()
{
    ###########################################################################
    #
    #   NOTE:   Version 12 of Nuke requires version Qt 5.12.1 of Qt. This is
    #           not supported by the current PostVis OZ environment.
    #
    ###########################################################################
    #   Set the Nuke Verison
    NUKE_VERSION="12.oo0v3"
    NUKE_LOCATION="/vol/apps/nuke/$NUKE_VERSION"

    #   Launch The Foundry Nuke
    if [ $PLATFORM == "Linux" ]; then
        if [ `oz envinfo | grep -c "nuke-$NUKE_VERSION"` == 0 ]; then
            echo -e "\033[37;1mnuke-$NUKE_VERSION\033[0m was added to the current environment...\033[0m"
            oz --add "nuke-$NUKE_VERSION"  >> /dev/null
        fi

        echo -e "\033[37;1mLaunching Nuke $NUKE_VERSION...\033[0m"
        eval "$NUKE_LOCATION/nuke $@"
    fi
}

function ozadd()
{
    if [ $PLATFORM == "Linux" ]; then
        if [ `oz envinfo | grep -c "$1"` == 0 ]; then
            echo -e "\033[33;1mAdding\033[37;1m $1 \033[0mto the current environment..."
            oz --add $1 >> /dev/null
        fi
    else
        echo -e "\033[37mThe OZ Environment is not available on this platform...\033[0m"
    fi
}

function ozrem()
{
    if [ $PLATFORM == "Linux" ]; then
        if [ -z $1 ]; then
            echo -e "\033[37;1mA pack name must be specified\033[0m"
        else
            if [ `oz envinfo | grep -c "$1"` != 0 ]; then
                echo -e "\033[37;1mRemoving $1 from the current environment...\033[0m"
                oz --remove $1 >> /dev/null
            fi
        fi
    else
        echo -e "\033[37;1mThe OZ Environment is not available on this platform...\033[0m"
    fi
}

function painter()
{
    if [ $PLATFORM == "Linux" ]; then
        #   Make sure Substance Painter is loaded in our oz environment
        ozadd "SubstancePainter-$SUBSTANCE_PAINTER_VERSION"

        #   Launch Substance Painter
        echo -e "\033[37;1mLaunching SubstancePainter-$SUBSTANCE_PAINTER_VERSION\033[0m"
        SubstancePainter
    elif [ $PLATFORM == "Darwin" ]; then
        #   Make sure Substance Painter is installed
        SUBSTANCE_PAINTER_LOCATION="/Applications/Substance Painter.app/Contents/MacOS"

        #   Launch Substance Designer
        echo -e "\033[37;1mLaunching Substance Painter...\033[0m"
        "$SUBSTANCE_PAINTER_LOCATION/Substance Painter"
    fi
}

function pakrat()
{
    if [ $PLATFORM == "Linux" ]; then
        #   Make sure Substance Painter is loaded in our oz environment
        ozadd "pakrat-$PAKRAT_VERSION"

        #   Launch PakRat
        echo -e "\033[37;1mLaunching pakrat $PAKRAT_VERSION\033[0m"
        pakrat2
    else
        echo -e "\033[37mThe OZ Environment is not available on this platform...\033[0m"
    fi

}

function qtcreator()
{
    if [ $PLATFORM == "Linux" ]; then
        echo -e "\033[37mThe Qt Creator Application in not available on thisplatform...\033[0m"
    else
        QTCREATOR_LOCATION="/Applications/MacPorts/Qt4/Qt4\ Creator.app/Contents/MacOS"

        echo -e "\033[37mLaunching Qt Creator...\033[0m"
        eval "$QTCREATOR_LOCATION/Qt\ Creator"
    fi
}

function rv()
{
    if [ $PLATFORM == "Linux" ]; then
         #   Make sure RV is loaded in our oz environment
        if  [ `ozinfo | grep -c " - rv"` == 0 ]; then
            echo -e "\033[31;1mError: RV is not part of the current oz environment...\033[0m"
        else
            #   Launch Autodesk RV
            if [ -d $RV_LOCATION ]; then
                echo -e "\033[37;1mLaunching RV...\033[0m"
                eval "$RV_LOCATION/bin/rv $@"
            fi
        fi
    elif [ $PLATFORM == "Darwin" ]; then
        #   Set the RV_LOCATION Environment Variable
        RV_LOCATION="/Applications/RV.app/Contents/MacOS"

        #   Launch Autodesk RV
        if [ -d $RV_LOCATION ]; then
            echo -e "\033[37;1mLaunching RV...\033[0m"
            eval "$RV_LOCATION/RV $@"
        fi
    fi
}

function scam()
{
    if [ $PLATFORM == "Linux" ]; then
        echo -e "\033[37;1mLoading simulcam OZ Environment...\033[0m"
        oz $SCAM_OZ >> /dev/null
    else
        echo -e "\033[37;1mOZ Environments are not available on this platform...\033[0m"
    fi

}

function stage()
{
    if [ $PLATFORM == "Linux" ]; then
        echo -e "\033[37;1mLoading stage OZ Environment $STAGE_OZ...\033[0m"
        oz $STAGE_OZ >> /dev/null
    else
        echo -e "\033[37;1mOZ Environments are not available on this platform...\033[0m"
    fi
}

function totalview()
{
    if [ $PLATFORM == "Linux" ]; then
        #   Make sure TotalView is loaded in out oz environment
        ozadd "totalview-$TOTALVIEW_VERSION"

        #   Launch the Rogue Wave TotalView Debugger
        echo -e "\033[37;1mLaunching totalview-2019.$TOTALVIEW_VERSION\033[0m"
        /vol/apps/totalview.2019.$TOTALVIEW_VERSION/toolworks/totalview.2019.$TOTALVIEW_VERSION/bin/totalview

    else
        echo -e "\033[37;1mThis application is not available on this platform...\033[0m"
    fi
}

function updatePath()
{
    if [ $PLATFORM == "Linux" ]; then
        if [ "${PATH}" != *.:${HOME}/scripts* ]; then
            PATH=.:$HOME/scripts:$PATH
        fi
    elif [ $PLATFORM == "Darwin" ]; then
        if [ `echo $PATH | grep -c "$HOME/scripts"` == 0 ]; then PATH="$HOME/scripts:$PATH"; fi
        if [ `echo $PATH | grep -c "\."` == 0 ]; then PATH=".:$PATH"; fi
        if [ `echo $PATH | grep -c "/opt/local/sbin"` == 0 ]; then PATH="/opt/local/sbin:$PATH"; fi
        if [ `echo $PATH | grep -c "/opt/local/bin"` == 0 ]; then PATH="/opt/local/bin:$PATH"; fi
    fi
}

function updatePrompt()
{
    #   Set the command line prompt
    PS1="\e[93m\]\!\[\e[97m\]:\[\e[96m\]\u\[\e[93m\]@\[\e[96m\]\h\[\e[97m\]:\[\e[32m\]\w\[\e[97m\] > \[\e[0m\]"

    if [ $PLATFORM == "Linux" ]; then
        #   Building the title
        if [ ${OZ_CONTEXT} ]; then
		    echo -ne "\033]0;${OZ_CONTEXT}\007"
        else
	    	echo -ne "\033]0;NO Oz Environment\077"
        fi
    fi
}

function unstable()
{
    if [ $PLATFORM == "Linux" ]; then
        echo -e "\033[37;1mLoading the current unstable OZ Environment...\033[0m"
        unstableoz >> /dev/null
    else
        echo -e "\033[37;1mOZ Environments are not available on this platform...\033[0m"
    fi
}

function vscode()
{
    #   Make sure the VSCODE Package is loaded
    if   [ $PLATFORM == "Linux"  ]; then
        #   Set the oz environment to a base environment
        oz /

        #   Make sure Cmake is available
        ozadd "cmake-$CMAKE_VERSION"

        #   Make sure VSCode is loaded
        ozadd "VSCode-$VSCODE_VERSION"

        #   Launch VSCode
        echo -e "\033[37;1mLaunching VSCode-$VSCODE_VERSION...\033[0m"
        code

    elif [ $PLATFORM == "Darwin" ]; then
        #   Set the VSCODE_LOCATION Variable
        VSCODE_LOCATION="/Applications/Visual\ Studio\ Code.app/Contents/Resources/app/bin"

        #   Launch VSCode
        echo -e "\033[37;1mLaunching VSCode...\033[0m"
        eval "$VSCODE_LOCATION/code"
    fi
}

function vtune()
{
    if [ $PLATFORM == "Linux" ]; then
        #   Set the oz environment to a base environment
        oz /

        #   Print a banner telling the user what we are doing.
        echo -e "\033[37;1mLaunching vtune-amplifier-$VTUNE_VERSION\033[0m"

        #   Make sure the VTUNE envrionment is setup
        $HOME/Applications/Intel/vtune_amplifier/amplxe-vars.sh

        #   Launch VTUNE
        $HOME/Applications/Intel/vtune_amplifier/bin64/amplxe-gui
    else
        echo -e "\033[37;1mThis application is not available on this platform...\033[0m"
    fi
}

function windows()
{
    if [ $PLATFORM == "Linux" ]; then
        echo -e "\033[37;1mRetrieving Display Resolution...\033[0m"
        mmonitorRes=`xrandr | grep primary | sed  s/.*primary// | sed 's/+.*//'`
        xSize=`echo $mmonitorRes | sed 's/x.*//'`
        ySize=`echo $mmonitorRes | sed 's/.*x//'`
        xPos=$xSize
        yPos=0
        mrres=$(($xSize))x$(($ySize))+$(($xPos))+$((yPos))
        echo -e "\033[37;1mLaunching Remote Desktop...\033[0m"
        rdesktop $VIRTUAL_MACHINE -D -g $mrres
    else
        echo -e "\033[37;1mThis function is not available on this platform...\033[0m"
    fi
}
